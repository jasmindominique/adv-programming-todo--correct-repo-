{"version":3,"sources":["todo-list.js"],"names":["console","log","TodoList","finishedItem","document","querySelector","finishItemList","taskItems","filter","value","done","innerHTML","length","newToDo","listCheckbox","listCounter","counter","listItems","form","listField","hideItems","addEventListener","event","preventDefault","entry","TodoItem","push","render","entryField","style","display","window","newToDoValue","background","button","createElement","appendChild","dispatchEvent","Event"],"mappings":"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","sourcesContent":["console.log(\"Jasmin's To Do List\")\n// TodoList is our main class that does everything\n\nclass TodoList {\n    constructor () {\n        console.log('TodoList()')\n\n        // this.$toDoList = document.querySelectorAll(selector) // So that this can me found outside the DOM - Use the \"this\" property\n\n        this.taskItems = []; //array of items in the list\n\n        // all logic for how things change get kicked off from the constructor\n        // or from methods called by the construtor. DOM changes should be\n        // restricted to the render() method.\n\n        // sequence of what needs to happen:\n\n        // 1. Set up variables to find where \"things\" should be stored\n       \n        //**These are all the elements that you interact with**\n\n         const newToDo = document.querySelector('[name=\"new-todo\"]');  //targeting the input *name field*\n\n         const listCheckbox = document.querySelector('[type=\"checkbox\"]'); //targeting the *checkbox field*\n\n         const listCounter = document.querySelector('.filter-group'); \n\n         const counter = document.querySelector('.total-items'); //targeting the total *items counter*\n\n        const listItems = document.querySelector('todolist-items'); \n\n         const form = document.querySelector('form');\n\n         let listField = document.querySelector('.todo-list')\n\n         let hideItems = true;\n\n        form.addEventListener('submit', (event)=>{\n            event.preventDefault()\n        })\n        \n\n    //** let hiddenTasks = ?// need a place to store hidden task items\n\n        // 2. hook up listeners to the DOM elements (a.k.a ListItems)\n        //**These eventListeners will be connected to the DOM Elements so that they know what to \"look\" for.**        \n        // this.inputName.addEventListener('keyup', this.) //?? run in the child class - will target .new-todo on \"keyup\" -- \"brain swap\" - These event listeners need to be called outside, and in the constructor. \n        // this.listCheckbox.addEventListener('toggle', this.) // will toggle the checkbox \n        // 3. setup and manage the list of TodoItems as they are created\n        //    3a. setup an array to hold the list of items\n         // 4. when a new item is added via 2a.\n        //    4a. add that to the array from 3a.\n        //    4b. update the count of items\n        //    4c. call render()\n\n        //Event listener for new item in todolist\n\n        newToDo.addEventListener('change', ()=>{\n         \n            const entry = new TodoItem(newToDo.value); // 3\n            this.taskItems.push(entry); // 3a this sets up an array for the list of items\n\n            counter.innerHTML=this.taskItems.length; //4b\n\n            this.render(); //5\n        })\n\n        //event listener for my checkbox!!\n        // my checkbox is attached to hidden items\n\n        listCheckbox.addEventListener('click', ()=>{\n            console.log(\"checkbox was clicked\")\n            // this.entryField = document.createElement('div');\n\n            // let oldTodos = this.taskItems;\n\n            //     this.taskItems = [];\n\n            //     this.taskItems.forEach(oldTodos, function (todo) {\n\n            //         if (!todoItems.completed) this.taskItems.push(todo);\n\n            //     });\n\n            hideItems = !hideItems;\n\n            // if(listCheckbox == false){\n            //     console.log('i;m checked');\n            // }  else{\n            //     // this.entryField.style.display='block';\n            // }\n            //  if(!hideItems){ //if the item is done ...then\n            //     listItems.classList.add('completed-items');\n            // }else{\n            //     listItems.classList.remove('completed-items');\n            // }\n\n            if(!hideItems){ //if the item is done ...then\n                this.entryField.style.display='block';\n            }else{\n                this.entryField.style.display='none';\n            }\n\n        // this.entryField = document.createElement('div');\n\n        //     if(this.done){ //if the item is done ...then\n        //     this.entryField.style.display = 'block';\n        // }else{\n        //     this.entryField.style.display = 'none';\n        // }\n\n            this.render();\n        })\n\n        window.addEventListener('item-updated', this.render)\n    }\n\n\n\n    render = () => { \n        // update the DOM with any changes for the list\n        let finishedItem = document.querySelector('.finished-items');\n        // this should be the only method in our TodoList class that modifies\n        // DOM values\n        let finishItemList = this.taskItems.filter(value =>{\n            return value.done\n        })\n\n        finishedItem.innerHTML = finishItemList.length;\n        // loop over our list of items\n        // if the checkbox is checked, only showed uncompleted items\n        // otherwise show all items\n    }\n}\n\n// TodoItem represents an individual todo item in our list\nclass TodoItem {\n    constructor(newToDoValue) {\n        console.log('TodoItem()', newToDoValue)\n\n        this.newToDoValue = newToDoValue //-- why did we do this in class??\n\n        // sequence of what needs to happen:\n        //weird/possibly correct code??\n\n        // 1. create the necessary DOM markup for this item, e.g. createElement\n        //    which would include a DONE button to mark it complete\n        // this.listField = document.querySelector('.todoEntry') // this targets the 'New-todo' field in the dom\n        this.listField = document.querySelector('.todo-list')\n\n\n        this.entryField = document.createElement('div');\n        // console.log(this.entryField) creating a div so that the items entered in the field have something to go into\n        this.button = document.createElement('button'); // creating a button for the form field so that we can enter information\n        //console.log(this.button) creating a div so that the items entered in the field have something to go into\n        \n        this.button.innerHTML = \"DONE\" //text for the button\n        this.entryField.innerHTML = this.newToDoValue //text for the button\n\n        \n        // 2. add it to the DOM\n        this.listField.appendChild(this.entryField); // adding the new-todo item to the dom\n        this.entryField.appendChild(this.button); // adding the button from the div (entry)\n        \n\n        // 3. add eventListener for the button for this item\n\n        this.button.addEventListener('click', ()=>{\n            console.log('done button is clicked')\n\n            this.done=!this.done;\n\n            this.render();\n\n                window.dispatchEvent(new Event('item-updated'))\n        }) \n\n        //how do we write this?\n\n        // 4. setup a variable to keep track of if this item is complete or not (true/false)\n        // this.complete = false\n    }\n\n    render = () => {\n        // update the DOM with any changes for this item\n        \n        if(this.done){ //if the item is done ...then\n            this.entryField.style.background = 'grey';\n            this.button.innerHTML = \"UNDO\";\n        }else{\n            this.entryField.style.background = 'white';\n            this.button.innerHTML = \"DONE\";\n        }\n\n        // if(this.done){ //if the item is done ...then\n        //     this.entryField.style.background = 'grey';\n        //     this.button.innerHTML = \"DONE\";\n        // }else{\n        //     this.entryField.style.display = 'block';\n        //     this.button.innerHTML = \"UNDO\";\n        // }\n\n\n        // if(this.done){\n        //     this.style.display = \"none\";\n        //     this.button.innerHTML = \"DONE\";\n        // }else{\n        //     this.style.display = \"none\";\n        //     this.button.innerHTML = \"UNDO\";\n        // }\n\n        // modify the DOM elements to reflect whether this item is complete or not\n        // Style-wise: a completed item should have a strike-through over it, and\n        // the button label should change from 'Done' to 'Undo' to allow toggling\n        // it back\n    }\n}\n\n\n\n// this.entryField.innerHTML = \"\"\n\n    //     if ( this.entryField === \"\"){\n    //     return;\n    // }"],"file":"todo-list.js"}